@page "/database-config"
@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@using MudBlazor
@layout ConfigLayout
@inject NavigationManager NavigationManager
@inject IConfiguration Configuration
@inject IWebHostEnvironment Environment

<MudGrid Justify="Justify.Center" Class="d-flex align-center" Style="min-height: 100vh;">
    <MudItem xs="12" sm="8" md="6" lg="4">
        <MudCard Elevation="4" Class="pa-4">
            <MudForm @ref="_form" Model="@dbConfig" Class="d-flex flex-column gap-4">
                <MudText Typo="Typo.h5" Class="mb-4 text-center">Database Configuration</MudText>

                <MudSelect T="string" @bind-Value="dbConfig.DatabaseType" Label="Database Type" Required="true"
                    For="@(() => dbConfig.DatabaseType)" Variant="Variant.Outlined">
                    <MudSelectItem Value="@("MySQL")">MySQL</MudSelectItem>
                    <MudSelectItem Value="@("PostgreSQL")">PostgreSQL</MudSelectItem>
                    <MudSelectItem Value="@("SQLServer")">SQL Server</MudSelectItem>
                </MudSelect>

                <MudTextField @bind-Value="dbConfig.Host" Label="Host" Required="true" For="@(() => dbConfig.Host)"
                    Variant="Variant.Outlined" />

                <MudTextField @bind-Value="dbConfig.Username" Label="Username" Required="true"
                    For="@(() => dbConfig.Username)" Variant="Variant.Outlined" />

                <MudTextField @bind-Value="dbConfig.Password" Label="Password" Required="true"
                    InputType="@(_passwordVisible? InputType.Text: InputType.Password)" For="@(() => dbConfig.Password)"
                    Variant="Variant.Outlined" Adornment="Adornment.End"
                    AdornmentIcon="@(_passwordVisible? Icons.Material.Filled.VisibilityOff : Icons.Material.Filled.Visibility)"
                    OnAdornmentClick="() => _passwordVisible = !_passwordVisible" />

                <MudTextField @bind-Value="dbConfig.DatabaseName" Label="Database Name" Required="true"
                    For="@(() => dbConfig.DatabaseName)" Variant="Variant.Outlined" />

                <MudTextField @bind-Value="dbConfig.TablePrefix" Label="Table Prefix"
                    For="@(() => dbConfig.TablePrefix)" Variant="Variant.Outlined"
                    HelperText="Optional: Add a prefix to all database tables" />

                <MudButton OnClick="TestConnection" Class="mb-2" Color="Color.Secondary" Variant="Variant.Filled">
                    Test Connection
                </MudButton>

                <MudButton Color="Color.Primary" Variant="Variant.Filled" Size="Size.Large" OnClick=@(async () => await
                    HandleValidSubmit())>
                    Save Configuration
                </MudButton>
            </MudForm>
        </MudCard>
    </MudItem>
</MudGrid>

@code {
    private MudForm _form;
    private DatabaseConfigModel dbConfig = new();
    private bool _passwordVisible;

    private async Task HandleValidSubmit()
    {
        await _form.Validate();
        if (_form.IsValid)
        {
            var configPath = Path.Combine(Environment.ContentRootPath, "appsettings.json");
            var jsonString = await File.ReadAllTextAsync(configPath);
            var jsonDoc = JsonDocument.Parse(jsonString);
            var root = jsonDoc.RootElement;

            var existingConfig = JsonSerializer.Deserialize<Dictionary<string, JsonElement>>(jsonString);
            existingConfig[nameof(DatabaseSettings)] = JsonSerializer.SerializeToElement(dbConfig);

            var options = new JsonSerializerOptions { WriteIndented = true };
            await File.WriteAllTextAsync(configPath, JsonSerializer.Serialize(existingConfig, options));

            NavigationManager.NavigateTo("/api-key-config");
        }
    }

    private async Task TestConnection()
    {
        // TODO: Implement connection test logic
        await Task.Delay(1000); // Simulated delay
    }

    public class DatabaseConfigModel
    {
        [Required(ErrorMessage = "Database type is required")]
        public string DatabaseType { get; set; }

        [Required(ErrorMessage = "Host is required")]
        public string Host { get; set; }

        [Required(ErrorMessage = "Username is required")]
        public string Username { get; set; }

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; }

        [Required(ErrorMessage = "Database name is required")]
        public string DatabaseName { get; set; }

        public string TablePrefix { get; set; }
    }
}