@page "/database-config"
@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@using DirectPay.API.Services
@using DirectPay.Application.Settings
@using MudBlazor
@layout ConfigLayout
@inject NavigationManager NavigationManager
@inject IConfiguration Configuration
@inject IWebHostEnvironment Environment
@inject IConfigurationService ConfigurationService
@inject ISnackbar Snackbar

<MudGrid Justify="Justify.Center" Class="d-flex align-center" Style="min-height: 100vh;">
    <MudItem xs="12" sm="8" md="6" lg="4">
        <MudCard Elevation="4" Class="pa-4">
            <MudForm @ref="_form" Model="@dbConfig" Class="d-flex flex-column gap-4">
                <MudText Typo="Typo.h5" Class="mb-4 text-center">Database Configuration</MudText>

                <MudSelect T="string" @bind-Value="dbConfig.DatabaseType" Label="Database Type" Required="true"
                    For="@(() => dbConfig.DatabaseType)" Variant="Variant.Outlined">
                    <MudSelectItem Value="@("MySQL")">MySQL</MudSelectItem>
                    <MudSelectItem Value="@("PostgreSQL")">PostgreSQL</MudSelectItem>
                    <MudSelectItem Value="@("SQLServer")">SQL Server</MudSelectItem>
                </MudSelect>

                <MudTextField @bind-Value="dbConfig.Host" Label="Host" Required="true" For="@(() => dbConfig.Host)"
                    Variant="Variant.Outlined" />

                <MudTextField @bind-Value="dbConfig.Port" Label="Port" Required="true" For="@(() => dbConfig.Port)"
                    Variant="Variant.Outlined" Type="InputType.Number" />

                <MudTextField @bind-Value="dbConfig.Username" Label="Username" Required="true"
                    For="@(() => dbConfig.Username)" Variant="Variant.Outlined" />

                <MudTextField @bind-Value="dbConfig.Password" Label="Password" Required="true"
                    InputType="@(_passwordVisible? InputType.Text: InputType.Password)" For="@(() => dbConfig.Password)"
                    Variant="Variant.Outlined" Adornment="Adornment.End"
                    AdornmentIcon="@(_passwordVisible? Icons.Material.Filled.VisibilityOff : Icons.Material.Filled.Visibility)"
                    OnAdornmentClick="() => _passwordVisible = !_passwordVisible" />

                <MudTextField @bind-Value="dbConfig.DatabaseName" Label="Database Name" Required="true"
                    For="@(() => dbConfig.DatabaseName)" Variant="Variant.Outlined" />

                <MudTextField @bind-Value="dbConfig.TablePrefix" Label="Table Prefix"
                    For="@(() => dbConfig.TablePrefix)" Variant="Variant.Outlined"
                    HelperText="Optional: Add a prefix to all database tables" />

                <MudButton OnClick="TestConnection" Class="mb-2" Color="Color.Secondary" Variant="Variant.Filled">
                    Test Connection
                </MudButton>

                <MudButton Color="Color.Primary" Variant="Variant.Filled" Size="Size.Large" OnClick=@(async () => await
                    HandleValidSubmit())>
                    Save Configuration
                </MudButton>
            </MudForm>
        </MudCard>
    </MudItem>
</MudGrid>

@code {
    private MudForm _form = default!;
    private DatabaseConfigModel dbConfig = new();
    private bool _passwordVisible;

    private async Task HandleValidSubmit()
    {
        await _form.Validate();
        if (_form.IsValid)
        {
            await ConfigurationService.UpdateSection(nameof(DatabaseSettings), dbConfig);
            NavigationManager.NavigateTo("/");
        }
    }

    private async Task TestConnection()
    {
        try
        {
            var connectionString = dbConfig.DatabaseType switch
            {
                "PostgreSQL" => $"Host={dbConfig.Host};Port={dbConfig.Port};Database={dbConfig.DatabaseName};Username={dbConfig.Username};Password={dbConfig.Password}",
                "SQLServer" => $"Server={dbConfig.Host},{dbConfig.Port};Database={dbConfig.DatabaseName};User Id={dbConfig.Username};Password={dbConfig.Password};TrustServerCertificate=True",
                "MySQL" => $"Server={dbConfig.Host};Port={dbConfig.Port};Database={dbConfig.DatabaseName};Uid={dbConfig.Username};Pwd={dbConfig.Password}",
                _ => throw new ArgumentException("Invalid database type")
            };

            bool isConnected = false;
            string errorMessage = string.Empty;

            switch (dbConfig.DatabaseType)
            {
                case "PostgreSQL":
                    using (var conn = new Npgsql.NpgsqlConnection(connectionString))
                    {
                        await conn.OpenAsync();
                        isConnected = true;
                    }
                    break;

                case "SQLServer":
                    using (var conn = new Microsoft.Data.SqlClient.SqlConnection(connectionString))
                    {
                        await conn.OpenAsync();
                        isConnected = true;
                    }
                    break;

                case "MySQL":
                    using (var conn = new MySql.Data.MySqlClient.MySqlConnection(connectionString))
                    {
                        await conn.OpenAsync();
                        isConnected = true;
                    }
                    break;
            }

            if (isConnected)
            {
                Snackbar.Add("Connection successful!", Severity.Success);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Connection failed: {ex.Message}", Severity.Error);
        }
    }

    private static string GetPort(string value)
    {
        return value switch
        {
            "PostgreSQL" => "5432",
            "MySQL" => "3306",
            "SQLServer" => "1433",
            _ => string.Empty
        };
    }

    public class DatabaseConfigModel
    {
        private string dbType = string.Empty;
        [Required(ErrorMessage = "Database type is required")]
        public string DatabaseType
        {
            get => dbType;
            set
            {
                dbType = value;
                Port = GetPort(value);
            }
        }

        [Required(ErrorMessage = "Host is required")]
        public string Host { get; set; } = string.Empty;

        [Required(ErrorMessage = "Port is required")]
        public string Port { get; set; } = string.Empty;

        [Required(ErrorMessage = "Username is required")]
        public string Username { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; } = string.Empty;

        [Required(ErrorMessage = "Database name is required")]
        public string DatabaseName { get; set; } = string.Empty;

        public string TablePrefix { get; set; } = string.Empty;
    }
}